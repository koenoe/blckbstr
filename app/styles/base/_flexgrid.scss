/**
 * Flex Grid - 
 * Version: 0.2.0
 * 
 * Simple grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Grid setup
 *
 * The grid will calculate dimensions based on these two variables
 * $fg-columns will inform the grid loops how many columns there should be.
 * $fg-gutter will inform the grid loops how big eac column's gutters should be.
 */
$fg-columns: 12 !default;
$fg-gutter: 30px !default;

/**
 * Break point namespace object
 *
 * Set the default namespace object with these defaults with the 
 * understanding that you can pass in whatever you might require for your site.
 *
 * $fg-breakpoints is a Sass list with nested lists inside. Each sub list defines two things. 
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 * Note: These should be in the proper order (at least till libsass handles map keys properly).
 * 
 * Note: If the measurement is left out then it will be skipped when generating 
 * the grid and applied to global styles.
 *
 */

$fg-breakpoints: (
  xs: 0,
  sm: 767px,
  md: 992px,
  lg: 1200px
) !default;

/**
 * Calculate column size percentage
 */
@function get-col-percent($column-num) {
  
  @return $column-num / $fg-columns * 100%;

}

/**
 * Spacing mixin to create uniform margin/padding
 */
@mixin spacing( $value, $type: margin, $orientation: vertical ) {
  @if $orientation == vertical {
    #{ $type }-top: $value;
    #{ $type }-bottom: $value;
  } @else {
    #{ $type }-left: $value;
    #{ $type }-right: $value;
  }
}

/**
 * Container classes
 */
.container-fluid {
  margin-left: $fg-gutter;
  margin-right: $fg-gutter;
  padding: 0 $fg-gutter;
}

.container {
  @extend .container-fluid;

  max-width: $container-lg;
  margin-left: auto;
  margin-right: auto;
} 

/**
 * Row wrapper class, flex box parent.
 */
.row {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  @include spacing((-$fg-gutter/2), margin, horizontal);

  &.reverse {
    flex-direction: row-reverse;
  }

  &.center {
    align-items: center;
  }
}

/**
 * Col classes, flex box children.
 */

[class^="col-"] {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  @include spacing(($fg-gutter/2), padding, horizontal);

  &.stretch {
    align-items: stretch;
    flex-direction: row;
  }
}

.col-fluid {
  flex-grow: 1;
}

/**
 * Generate a set of grid column classes using a namespace
 *
 * .col-[namespace] for intelligent column division
 * .col-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 */

@mixin grid-sizes($namespace) {

  // Run the loop for as many columns as speficied
  @for $i from 1 through $fg-columns {
    .col-#{$namespace}-#{$i} {
      flex-basis: get-col-percent($i);
    }
  }
}

/**
 * Build the grid in two steps, to help minimize file size
 * Step 1, for each namespace, create the grid-base
 * Step 2, for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */

@each $val in $fg-breakpoints {
  @if length($val) == 1 {

    $namespace: nth($val, 1);
    @include grid-sizes($namespace);

  } @else {

    $namespace: nth($val, 1);
    $size: nth($val, 2);

    @media only screen and (min-width: #{$size}) {
      @include grid-sizes($namespace);
    }
  }
}

/**
 * Create respond-to mixin
 */
@mixin respond-to($breakpoint) { 
  @if map-has-key($fg-breakpoints, $breakpoint) {

    @media (min-width: #{map-get($fg-breakpoints, $breakpoint)}) {
      @content;
    }

  } @else {

    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}